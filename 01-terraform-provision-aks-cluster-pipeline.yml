trigger:
- main

pool:
  vmImage: 'ubuntu-latest'

variables:
- name: DEV_ENVIORNMENT
  value: dev
- name: QA_ENVIORNMENT
  value: qa

# Stage-1: Terraform Validate Stage
stages:
  - stage: TerraformValidatee
    jobs:
      - job: TerraformValidateJobb
        displayName: Tfjob
        continueOnError: false
        steps:
## Step-1: Publish Artifacts to Pipeline (Pipeline artifacts provide a way to share files between stages in a pipeline or between different pipelines. )
         - task: PublishBuildArtifacts@1
           displayName: Publish manifest files
           inputs:
             PathtoPublish: '$(System.DefaultWorkingDirectory)/terraform-manifests'
             ArtifactName: 'terraform-manifests-out'
             publishLocation: 'container'

## Step-2: Install Latest Terraform (0.13.5) (Ideally not needed if we use default Ubuntu Agents)
         - task: TerraformInstaller@0
           displayName: Terraform install
           inputs:
             terraformVersion: 'latest'
## Step-3: Validate Terraform Manifests (terraform init, terraform validate)
         - task: TerraformCLI@0
           displayName: Terraform init
           inputs:
              command: 'init'
              workingDirectory: '$(System.DefaultWorkingDirectory)/terraform-manifests'
              backendType: 'azurerm'
              backendServiceArm: 'terraform-aks-azurerm-svc-con'
              ensureBackend: true
              backendAzureRmResourceGroupName: 'ask-rg'
              backendAzureRmResourceGroupLocation: 'centralindia'
              backendAzureRmStorageAccountName: 'dsgdfswdevops'
              backendAzureRmStorageAccountSku: 'Standard_LRS'
              backendAzureRmContainerName: 'tffiles'
              backendAzureRmKey: 'tf'
              allowTelemetryCollection: false
         - task: TerraformCLI@0
           displayName: Terraform validate
           inputs:
              command: 'validate'
              workingDirectory: '$(System.DefaultWorkingDirectory)/terraform-manifests'
              allowTelemetryCollection: false

# Stage-2: Deploy Stages for Dev & QA
# Deployment-1: Deploy Dev AKS Cluster
## Step-1: Define Variables for environments
## Step-2: Download SSH Secure File
## Step-3: Terraform Initialize (State Storage to store in Azure Storage Account for Dev AKS Cluster)
## Step-4: Terraform Plan (Create Plan)
## Step-5: Terraform Apply (Use the plan created in previous step)

  - stage:
    jobs:
      - deployment: DeployAKSClusters
        displayName: DeployDEVAKSClusters
        environment: $(DEV_ENVIORNMENT)
        pool:
         vmImage: "ubuntu-latest"
        strategy:
         runOnce:
           deploy:
            steps:
              - task: DownloadSecureFile@1
                displayName: Download SSH file
                name: sshkey
                inputs:
                  secureFile: 'aks-ssh.pub'
              - task: TerraformCLI@0
                displayName: Terraform init
                inputs:
                  command: 'init'
                  workingDirectory: '$(Pipeline.Workspace)/terraform-manifests-out'
                  backendType: 'azurerm'
                  backendServiceArm: 'terraform-aks-azurerm-svc-con'
                  backendAzureRmSubscriptionId: 'c8181ff6-16a9-497e-86ce-8bcb3d8c3578'
                  backendAzureRmResourceGroupName: 'ask-rg'
                  backendAzureRmStorageAccountName: 'dsgdfswdevops'
                  backendAzureRmContainerName: 'tffiles'
                  backendAzureRmKey: 'aks-$(DEV_ENVIORNMENT).tfstate'
                  allowTelemetryCollection: false
              - task: TerraformCLI@0
                displayName: Terraform plan
                inputs:
                  command: 'plan'
                  workingDirectory: '$(Pipeline.Workspace)/terraform-manifests-out'
                  commandOptions: '-var ssh_public_key=$(sshkey.secureFilePath) -var environment=$(DEV_ENVIRONMENT) -out $(Pipeline.Workspace)/terraform-manifests-out/$(DEV_ENVIRONMENT)-$(Build.BuildId).out'
                  allowTelemetryCollection: false
                  publishPlanResults: '$(DEV_ENVIRONMENT)-$(Build.BuildId).out'
                  environmentServiceName: "terraform-aks-azurerm-svc-con"
              - task: TerraformCLI@0
                inputs:
                  command: 'apply'
                  workingDirectory: '$(Pipeline.Workspace)/terraform-manifests-out'
                  commandOptions: '$(Pipeline.Workspace)/terraform-manifests-out/$(DEV_ENVIRONMENT)-$(Build.BuildId).out'
                  allowTelemetryCollection: false
                  environmentServiceName: "terraform-aks-azurerm-svc-con"